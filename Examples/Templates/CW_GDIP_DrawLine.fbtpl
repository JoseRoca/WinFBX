2
FBGUI
.bas
CWindow: GDI+: Drawing a line
' ########################################################################################
' Microsoft Windows
' File: CW_GDIP_DrawLine.fbtpl
' Contents: GDI+ - DrawLine example
' Compiler: FreeBasic 32 & 64 bit
' Copyright (c) 2016 José Roca. Freeware. Use at your own risk.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

' ========================================================================================
' Demonstrates how to draw a line using GDI Plus.
' To draw a line in Windows GDI+ you need a Graphics object and a Pen object. The Graphics
' object provides the DrawLine method, and the Pen object holds attributes of the line,
' such as color and width. The address of the Pen object is passed as an argument to the
' DrawLine method.
' The following program, which draws a line from (100, 100) to (400, 100), consists of
' three procedures: WinMain, WndProc, and OnPaint. The WinMain and WndProc functions provide
' the fundamental code common to most CWindow applications. There is no GDI+ code in the
' WndProc function. The WinMain function has a small amount of GDI+ code, namely the required
' calls to AfxGdipInit and AfxGdipShutdown. The GDI+ code that actually creates a Graphics
' object and draws a line is in the OnPaint procedure.
' The OnPaint procedure receives a handle to a device context and passes that handle to a
' Graphics constructor. The argument passed to the Pen constructor is a COLORREF value.
' The four numbers passed to the GDIP_ARGB function represent the alpha, red, green, and
' blue components of the color. The alpha component determines the transparency of the color;
' 0 is fully transparent and 255 is fully opaque. The four numbers passed to the DrawLine
' method represent the starting point (100, 100) and the ending point (400, 100) of the line.
' To make the application DPI aware and scale the graphic object, the OnPaint procedure
' calls the GetDpiX and GetDpiY methods to calculate the scaling ratios and passes the
' retrieved values to the ScaleTransform method.
' Note the call to AfxGdipInit in the WinMain function. It returns a token that is later
' passed to the AfxGdipShutdown procedure.
' ========================================================================================

#define UNICODE
#INCLUDE ONCE "Afx/CWindow.inc"
#INCLUDE ONCE "Afx/CGdiPlus/CGdiPlus.inc"
#INCLUDE ONCE "Afx/CGraphCtx.inc"
USING Afx

CONST IDC_GRCTX = 1001

DECLARE FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                          BYVAL hPrevInstance AS HINSTANCE, _
                          BYVAL szCmdLine AS ZSTRING PTR, _
                          BYVAL nCmdShow AS LONG) AS LONG

   END WinMain(GetModuleHandleW(NULL), NULL, COMMAND(), SW_NORMAL)

DECLARE FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

' ========================================================================================
' Draws the line.
' ========================================================================================
SUB OnPaint (BYVAL hdc AS HDC)

   ' // Creates a graphics object from the window device context
   DIM graphics AS CGpGraphics = hdc

   ' // Gets the DPI scaling ratios
   DIM rxRatio AS SINGLE = graphics.GetDpiX / 96
   DIM ryRatio AS SINGLE = graphics.GetDpiY / 96

   ' // Sets the scale transform to make it DPI aware
   graphics.ScaleTransform(rxRatio, ryRatio)

   ' // Draws the line
   DIM blackPen AS CGpPen = GDIP_ARGB(255, 0, 0, 0)
   graphics.DrawLine(@blackPen, 100, 100, 400, 100)

END SUB
' ========================================================================================

' ========================================================================================
' Main
' ========================================================================================
FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                  BYVAL hPrevInstance AS HINSTANCE, _
                  BYVAL szCmdLine AS ZSTRING PTR, _
                  BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   ' // The recommended way is to use a manifest file
   AfxSetProcessDPIAware

   ' // Initializes GDI+
   DIM token AS ULONG_PTR = AfxGdipInit

   ' // Creates the main window
   DIM pWindow AS CWindow
   ' -or- DIM pWindow AS CWindow = "MyClassName" (use the name that you wish)
   pWindow.Create(NULL, "GDI+ Drawing a line", @WndProc)
   pWindow.WindowStyle = WS_OVERLAPPED OR WS_CAPTION OR WS_SYSMENU
   ' // Changes the background to white
   pWindow.Brush = GetStockObject(WHITE_BRUSH)
   ' // Sizes it by setting the wanted width and height of its client area
   pWindow.SetClientSize(500, 200)
   ' // Centers the window
   pWindow.Center

   ' // Displays the window and dispatches the Windows messages
   FUNCTION = pWindow.DoEvents(nCmdShow)

   ' // Shutdowns GDI+
   AfxGdipShutdown(token)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Main window procedure
' ========================================================================================
FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

   SELECT CASE uMsg

      CASE WM_COMMAND
         SELECT CASE GET_WM_COMMAND_ID(wParam, lParam)
            CASE IDCANCEL
               ' // If ESC key pressed, close the application by sending an WM_CLOSE message
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN
                  SendMessageW hwnd, WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF
         END SELECT

      CASE WM_PAINT
         DIM ps AS PAINTSTRUCT
         DIM hdc AS HDC = BeginPaint(hwnd, @ps)
         OnPaint(hdc)
         EndPaint(hwnd, @ps)
         EXIT FUNCTION

    	CASE WM_DESTROY
         ' // Ends the application by sending a WM_QUIT message
         PostQuitMessage(0)
         EXIT FUNCTION

   END SELECT

   ' // Default processing of Windows messages
   FUNCTION = DefWindowProcW(hwnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================
