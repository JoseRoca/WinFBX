2
FBGUI
.bas
CWindow: CUSTOMCTRL: PGBAR3D control (SendMessageW version)
' ########################################################################################
' Microsoft Windows
' File: CW_PG3D.fbtpl
' Contents: CWindow with a PGBAR3D control
' Compiler: FreeBasic 32 & 64 bit
' Copyright (c) 2016 José Roca. Freeware. Use at your own risk.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

#define UNICODE
#INCLUDE ONCE "Afx/CWindow.inc"
#INCLUDE ONCE "Afx/CPgBar3D.inc"
USING Afx

enum
   IDC_START = 1001
   IDC_REVERSE
   IDC_OPTFAST
   IDC_OPTSLOW
   IDC_CHKTXT
   IDC_BARLEFT
   IDC_BARRIGHT
   IDC_BARTOP
   IDC_BARBOTTOM
   IDC_BARMIDDLE
end enum

DECLARE FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                          BYVAL hPrevInstance AS HINSTANCE, _
                          BYVAL szCmdLine AS ZSTRING PTR, _
                          BYVAL nCmdShow AS LONG) AS LONG

   END WinMain(GetModuleHandleW(NULL), NULL, COMMAND(), SW_NORMAL)

' // Forward declaration
DECLARE FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

' ========================================================================================
' Main
' ========================================================================================
FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                  BYVAL hPrevInstance AS HINSTANCE, _
                  BYVAL szCmdLine AS ZSTRING PTR, _
                  BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   AfxSetProcessDPIAware

   ' // Create the main window
   DIM pWindow AS CWindow
   pWindow.Create(NULL, "CWindow with PGBAR3D controls", @WndProc)
   pWindow.SetClientSize(300, 230)
   pWindow.Center

   ' // Add the buttons
   DIM hbtReverse AS HWND = pWindow.AddControl("Button", , IDC_REVERSE, "&Reverse", 40, 95, 100, 23)
   DIM hbtStart AS HWND = pWindow.AddControl("Button", , IDC_START, "&Start", 158, 95, 100, 23)
   EnableWindow(hbtReverse, FALSE)   ' // Disable the reverse button

   ' // Add the check boxes
   pWindow.AddControl("Option", , IDC_OPTFAST, "Fast", 40, 40, 75, 23)
   pWindow.AddControl("Option", , IDC_OPTSLOW, "Slow", 40, 60, 75, 23)
   pWindow.AddControl("Checkbox", , IDC_CHKTXT, "Text on/off", 158, 60, 75, 23)
   SendMessageW GetDlgItem(pWindow.hWindow, IDC_OPTFAST), BM_SETCHECK, BST_CHECKED, 0

   ' // Add the top progress bar
   DIM pPgBarTop AS CPgBar3D = CPgBar3D(@pWindow, IDC_BARTOP, "", 10, 10, 280, 23)
   SendMessageW pPgBarTop.hWindow, PGB_SETMAX, 100, 0                           ' Max number of teps
   SendMessageW pPgBarTop.hWindow, PGB_SETBARCOL, PGB_CYAN, 0                   ' Bar color scheme
   SendMessageW pPgBarTop.hWindow, PGB_SETBARDIR, PGB_BD_LEFTTORIGHT, 0         ' Bar direction, left to right
   SendMessageW pPgBarTop.hWindow, PGB_SETGRADIENTDIR, PGB_GD_HORIZONTAL, 0     ' Horizontal gradient
   SendMessageW pPgBarTop.hWindow, PGB_SETTXTCOLBKG, BGR(0, 255, 255), 0        ' Backgound text color
   SendMessageW pPgBarTop.hWindow, PGB_SETTXTCOLBAR, BGR(0, 0, 0), 0            ' Bar text color

   ' // Add the left progress bar
   DIM pPgBarLeft AS CPgBar3D = CPgBar3D(@pWindow, IDC_BARLEFT, "", 10, 40, 23, 150)
   SendMessageW pPgBarLeft.hWindow, PGB_SETMAX, 100, 0                          ' Max number of teps
   SendMessageW pPgBarLeft.hWindow, PGB_SETBARCOL, PGB_GOLD, 0                  ' Bar color scheme
   SendMessageW pPgBarLeft.hWindow, PGB_SETBARDIR, PGB_BD_BOTTOMTOTOP, 0        ' Bar direction, bottom to top
   SendMessageW pPgBarLeft.hWindow, PGB_SETGRADIENTDIR, PGB_GD_VERTICAL, 0      ' Vertical gradient
   SendMessageW pPgBarLeft.hWindow, PGB_SETTXTCOLBKG, BGR(255, 255, 0), 0       ' Backgound text color
   SendMessageW pPgBarLeft.hWindow, PGB_SETTXTCOLBAR, BGR(0, 0, 255), 0         ' Bar text color
   SendMessageW pPgBarLeft.hWindow, PGB_SETTXTANGLE, 90, 0                      ' Text angle, vertical up

   ' // Add the right progress bar
   DIM pPgBarRight AS CPgBar3D = CPgBar3D(@pWindow, IDC_BARRIGHT, "", 267, 40, 23, 150)
   SendMessageW pPgBarRight.hWindow, PGB_SETMAX, 100, 0                         ' Max number of teps
   SendMessageW pPgBarRight.hWindow, PGB_SETBARCOL, PGB_RED, 0                  ' Bar color scheme
   SendMessageW pPgBarRight.hWindow, PGB_SETBARDIR, PGB_BD_TOPTOBOTTOM, 0       ' Bar direction, top to bottom
   SendMessageW pPgBarRight.hWindow, PGB_SETGRADIENTDIR, PGB_GD_VERTICAL, 0     ' Vertical gradient
   SendMessageW pPgBarRight.hWindow, PGB_SETCOLBKG, BGR(191, 191, 191), 0       ' Background color
   SendMessageW pPgBarRight.hWindow, PGB_SETTXTCOLBKG, BGR(255, 0, 0), 0        ' Backgound text color
   SendMessageW pPgBarRight.hWindow, PGB_SETTXTCOLBAR, BGR(255, 255, 0), 0      ' Bar text color
   SendMessageW pPgBarRight.hWindow, PGB_SETTXTANGLE, 270, 0                    ' Text angle, vertical down

   ' // Add the bottom progress bar
   DIM pPgBarBottom AS CPgBar3D = CPgBar3D(@pWindow, IDC_BARBOTTOM, "", 10, 200, 280, 23)
   SendMessageW pPgBarBottom.hWindow, PGB_SETMAX, 100, 0                        ' Max number of teps
   SendMessageW pPgBarBottom.hWindow, PGB_SETBARCOL, PGB_BLUE, 0                ' Bar color scheme
   SendMessageW pPgBarBottom.hWindow, PGB_SETBARDIR, PGB_BD_RIGHTTOLEFT, 0      ' Bar direction, right to left
   SendMessageW pPgBarBottom.hWindow, PGB_SETGRADIENTDIR, PGB_GD_HORIZONTAL, 0  ' Horizontal gradient
   SendMessageW pPgBarBottom.hWindow, PGB_SETCOLBKG, BGR(191, 191, 191), 0      ' Background color
   SendMessageW pPgBarBottom.hWindow, PGB_SETTXTCOLBKG, BGR(0, 0, 196), 0       ' Backgound text color
   SendMessageW pPgBarBottom.hWindow, PGB_SETTXTCOLBAR, BGR(255, 255, 255), 0   ' Bar text color
   SendMessageW pPgBarBottom.hWindow, PGB_SETTXTANGLE, 180, 0                   ' Text angle, vertical down

   ' // Add the middle progress bar
   DIM pPgBarMiddle AS CPgBar3D = CPgBar3D(@pWindow, IDC_BARMIDDLE, "", 40, 130, 218, 60)
   SendMessageW pPgBarMiddle.hWindow, PGB_SETMAX, 100, 0                        ' Max number of teps
   SendMessageW pPgBarMiddle.hWindow, PGB_SETBARCOL, PGB_SILVER, 0              ' Bar color scheme
   SendMessageW pPgBarMiddle.hWindow, PGB_SETBARDIR, PGB_BD_BOTTOMTOTOP, 0      ' Bar direction, bottom to top
   SendMessageW pPgBarMiddle.hWindow, PGB_SETGRADIENTDIR, PGB_GD_HORIZONTAL, 0  ' Horizontal gradient
   SendMessageW pPgBarMiddle.hWindow, PGB_SETCOLBKG, BGR(0, 0, 0), 0            ' Background color
   SendMessageW pPgBarMiddle.hWindow, PGB_SETTXTCOLBKG, BGR(0, 255, 255), 0     ' Backgound text color

   ' // Set background text in middle progressbar
   DIM wszText AS WSTRING * 260
   wszText = "Click Start to see action"
   SendMessageW pPgBarMiddle.hWindow, PGB_SETTXTBKG, CAST(WPARAM, @wszText), 0
   ' // Set bar text in middle progressbar
   wszText = "Hope you'll find it useful!"
   SendMessageW pPgBarMiddle.hWindow, PGB_SETTXTBAR, CAST(WPARAM, @wszText), 0
   ' // Tell control to use custom text
   SendMessageW pPgBarMiddle.hWindow, PGB_SETTXTON, 0, PGB_TEXTCUSTOM

   ' // Required: Build the bars
   SendMessageW pPgBarTop.hWindow, PGB_BUILDBARS, 0, 0
   SendMessageW pPgBarLeft.hWindow, PGB_BUILDBARS, 0, 0
   SendMessageW pPgBarRight.hWindow, PGB_BUILDBARS, 0, 0
   SendMessageW pPgBarBottom.hWindow, PGB_BUILDBARS, 0, 0
   SendMessageW pPgBarMiddle.hWindow, PGB_BUILDBARS, 0, 0

   |

   ' // Dispatch Windows messages
   FUNCTION = pWindow.DoEvents(nCmdShow)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Main window callback procedure
' ========================================================================================
FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

   STATIC slow AS BOOLEAN

   SELECT CASE uMsg

'      CASE WM_SYSCOMMAND
'         ' // Ignore the red X (close) button
'         IF (wParam AND &HFFF0) = SC_CLOSE THEN EXIT FUNCTION

      CASE WM_COMMAND
         SELECT CASE GET_WM_COMMAND_ID(wParam, lParam)
            CASE IDCANCEL
               ' // If ESC key pressed, close the application sending an WM_CLOSE message
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN
                  SendMessageW hwnd, WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF

            CASE IDC_CHKTXT
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN
                  DIM nCheck AS LRESULT = SendMessageW(GetDlgItem(hwnd, IDC_CHKTXT), BM_GETCHECK, 0, 0)
                  SendMessageW GetDlgItem(hwnd, IDC_BARLEFT), PGB_SETTXTON, 0, nCheck
                  SendMessageW GetDlgItem(hwnd, IDC_BARLEFT), PGB_REFRESH, 0, 0
                  SendMessageW GetDlgItem(hwnd, IDC_BARRIGHT), PGB_SETTXTON, 0, nCheck
                  SendMessageW GetDlgItem(hwnd, IDC_BARRIGHT), PGB_REFRESH, 0, 0
                  SendMessageW GetDlgItem(hwnd, IDC_BARTOP), PGB_SETTXTON, 0, nCheck
                  SendMessageW GetDlgItem(hwnd, IDC_BARTOP), PGB_REFRESH, 0, 0
                  SendMessageW GetDlgItem(hwnd, IDC_BARBOTTOM), PGB_SETTXTON, 0, nCheck
                  SendMessageW GetDlgItem(hwnd, IDC_BARBOTTOM), PGB_REFRESH, 0, 0
                  EXIT FUNCTION
               END IF

            CASE IDC_OPTFAST
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN slow = FALSE

            CASE IDC_OPTSLOW
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN slow = TRUE

            CASE IDC_START
               EnableWindow(GetDlgItem(hwnd, IDC_START), FALSE)   ' // Disable the start button
               DIM wszText AS WSTRING * 260 = "Please wait..."
               SendMessageW GetDlgItem(hwnd, IDC_BARMIDDLE), PGB_SETTXTBKG, CAST(WPARAM, @wszText), CTRUE
               FOR x AS LONG = 0 TO 4
                  FOR i AS LONG= 1 TO 100
                     SELECT CASE x
                        CASE 0: SendMessageW GetDlgItem(hwnd, IDC_BARLEFT), PGB_STEPUP, 0, 0
                        CASE 1: SendMessageW GetDlgItem(hwnd, IDC_BARTOP), PGB_STEPUP, 0, 0
                        CASE 2: SendMessageW GetDlgItem(hwnd, IDC_BARRIGHT), PGB_STEPUP, 0, 0
                        CASE 3: SendMessageW GetDlgItem(hwnd, IDC_BARBOTTOM), PGB_STEPUP, 0, 0
                        CASE 4: SendMessageW GetDlgItem(hwnd, IDC_BARMIDDLE), PGB_STEPUP, 0, 0
                     END SELECT
                     IF i MOD 2 = 0 THEN AfxDoEvents(hwnd)
                     IF slow THEN SLEEP 40
                  NEXT
               NEXT
               EnableWindow(GetDlgItem(hwnd, IDC_REVERSE), CTRUE)   ' // Enable the reverse button
               EXIT FUNCTION

            CASE IDC_REVERSE
               EnableWindow(GetDlgItem(hwnd, IDC_REVERSE), FALSE)   ' // Disable the reverse button
               DIM wszText AS WSTRING * 260 = "Please wait..."
               SendMessageW GetDlgItem(hwnd, IDC_BARMIDDLE), PGB_SETTXTBKG, CAST(WPARAM, @wszText), CTRUE
               FOR x AS LONG = 0 TO 4
                  FOR i AS LONG = 1 TO 100
                     SELECT CASE x
                        CASE 0: SendMessageW GetDlgItem(hwnd, IDC_BARMIDDLE), PGB_STEPDN, 0, 0
                        CASE 1: SendMessageW GetDlgItem(hwnd, IDC_BARBOTTOM), PGB_STEPDN, 0, 0
                        CASE 2: SendMessageW GetDlgItem(hwnd, IDC_BARRIGHT), PGB_STEPDN, 0, 0
                        CASE 3: SendMessageW GetDlgItem(hwnd, IDC_BARTOP), PGB_STEPDN, 0, 0
                        CASE 4: SendMessageW GetDlgItem(hwnd, IDC_BARLEFT), PGB_STEPDN, 0, 0
                     END SELECT
                     IF i MOD 2 = 0 THEN AfxDoEvents(hwnd)
                     IF slow THEN SLEEP 40
                  NEXT
               NEXT
               wszText = "Click Start to see action"
               SendMessageW GetDlgItem(hwnd, IDC_BARMIDDLE), PGB_SETTXTBKG, CAST(WPARAM, @wszText), CTRUE
               EnableWindow(GetDlgItem(hwnd, IDC_START), CTRUE)   ' // Enable the start button
               EXIT FUNCTION

         END SELECT

    	CASE WM_DESTROY
         ' // End the application by sending a WM_QUIT message
         PostQuitMessage(0)
         EXIT FUNCTION

   END SELECT

   ' // Default processing of Windows messages
   FUNCTION = DefWindowProcW(hWnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================
