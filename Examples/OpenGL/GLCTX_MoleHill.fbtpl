2
FBGUI
.bas
CWindow: GRAPHCTX: OpenGL - MoleHill
' ########################################################################################
' Microsoft Windows
' File: GLCTX_MoleHill.fbtpl
' Contents: Graphic Control OpenGL - MoleHill
' Compiler: FreeBasic 32 & 64 bit
' /* Copyright (c) Mark J. Kilgard, 1995. */
' /* This program is freely distributable without licensing fees
'    and is provided without guarantee or warrantee expressed or
'    implied. This program is -not- in the public domain. */
' /* molehill uses the GLU NURBS routines to draw some nice surfaces. */
' Adapted in 2017 by José Roca. Freeware. Use at your own risk.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

#define UNICODE
#INCLUDE ONCE "Afx/CWindow.inc"
#INCLUDE ONCE "Afx/AfxGlut.inc"
#INCLUDE ONCE "Afx/CGraphCtx.inc"
USING Afx

CONST GL_WINDOWWIDTH   = 600                   ' Window width
CONST GL_WINDOWHEIGHT  = 400                   ' Window height
CONST GL_WindowCaption = "OpenGL - MoleHill"   ' Window caption
CONST IDC_GRCTX = 1001

DECLARE FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                          BYVAL hPrevInstance AS HINSTANCE, _
                          BYVAL szCmdLine AS ZSTRING PTR, _
                          BYVAL nCmdShow AS LONG) AS LONG

   END WinMain(GetModuleHandleW(NULL), NULL, COMMAND(), SW_NORMAL)

' // Forward declarations
DECLARE FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
DECLARE FUNCTION GraphCtx_SubclassProc ( _
   BYVAL hwnd   AS HWND, _                 ' // Control window handle
   BYVAL uMsg   AS UINT, _                 ' // Type of message
   BYVAL wParam AS WPARAM, _               ' // First message parameter
   BYVAL lParam AS LPARAM, _               ' // Second message parameter
   BYVAL uIdSubclass AS UINT_PTR, _        ' // The subclass ID
   BYVAL dwRefData AS DWORD_PTR _          ' // Pointer to reference data
   ) AS LRESULT

' =======================================================================================
' OpenGL class
' =======================================================================================
TYPE CtxOgl

   Private:
      m_pGraphCtx AS CGraphCtx PTR

   Public:
      DECLARE CONSTRUCTOR (BYVAL pGraphCtx AS CGraphCtx PTR)
      DECLARE DESTRUCTOR
      DECLARE SUB SetupScene
      DECLARE SUB ResizeScene
      DECLARE SUB RenderScene

END TYPE
' =======================================================================================

' ========================================================================================
' COGL constructor
' ========================================================================================
CONSTRUCTOR CtxOgl (BYVAL pGraphCtx AS CGraphCtx PTR)
   m_pGraphCtx = pGraphCtx
END CONSTRUCTOR
' ========================================================================================

' ========================================================================================
' COGL Destructor
' ========================================================================================
DESTRUCTOR CtxOgl
END DESTRUCTOR
' ========================================================================================

' =======================================================================================
' All the setup goes here
' =======================================================================================
SUB CtxOgl.SetupScene

   DIM nurb AS GLUnurbs PTR
   DIM AS LONG u, v

   DIM mat_red_diffuse(3) AS SINGLE = {0.7, 0.0, 0.1, 1.0}
   DIM mat_green_diffuse(3) AS SINGLE = {0.0, 0.7, 0.1, 1.0}
   DIM mat_blue_diffuse(3) AS SINGLE = {0.0, 0.1, 0.7, 1.0}
   DIM mat_yellow_diffuse(3) AS SINGLE = {0.7, 0.8, 0.1, 1.0}
   DIM mat_specular(3) AS SINGLE = {1.0, 1.0, 1.0, 1.0}
   DIM mat_shininess(0) AS SINGLE = {100.0}
   DIM knots(7) AS SINGLE = {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0}

   DIM pts1(3, 3, 2) AS SINGLE
   DIM pts2(3, 3, 2) AS SINGLE
   DIM pts3(3, 3, 2) AS SINGLE
   DIM pts4(3, 3, 2) AS SINGLE

   glMaterialfv GL_FRONT, GL_SPECULAR, @mat_specular(0)
   glMaterialfv GL_FRONT, GL_SHININESS, @mat_shininess(0)
   glEnable GL_LIGHTING
   glEnable GL_LIGHT0
   glEnable GL_DEPTH_TEST
   glEnable GL_AUTO_NORMAL
   glEnable GL_NORMALIZE
   nurb = gluNewNurbsRenderer
   gluNurbsProperty nurb, GLU_SAMPLING_TOLERANCE, 25.0
   gluNurbsProperty nurb, GLU_DISPLAY_MODE, GLU_FILL

   ' /* Build control points for NURBS mole hills. */
   FOR u = 0 TO 3
      FOR v = 0 TO 3
         '/* Red. */
         pts1(u, v, 0) = 2.0 * u
         pts1(u, v, 1) = 2.0 * v
         IF  (u=1 OR u = 2) AND (v = 1 OR v = 2) THEN
            ' /* Stretch up middle. */
            pts1(u, v, 2) = 6.0
         ELSE
            pts1(u, v, 2) = 0.0
         END IF
         ' /* Green. */
         pts2(u, v, 0) = 2.0 * (u - 3.0)
         pts2(u, v, 1) = 2.0 * (v - 3.0)
         IF (u = 1 OR u = 2) AND (v = 1 OR v = 2) THEN
            IF u = 1 AND v = 1 THEN
               ' /* Pull hard on single middle square. */
               pts2(u, v, 2) = 15.0
            ELSE
               ' /* Push down on other middle squares. */
               pts2(u, v, 2) = -2.0
            END IF
         ELSE
            pts2(u, v, 2) = 0.0
         END IF
         ' /* Blue. */
         pts3(u, v, 0) = 2.0 * (u - 3.0)
         pts3(u, v, 1) = 2.0 * v
         IF (u=1 OR u = 2) AND (v = 1 OR v = 2) THEN
            IF u = 1 AND v = 2 THEN
               ' /* Pull up on single middple square. */
               pts3(u, v, 2) = 11.0
            ELSE
               ' /* Pull up slightly on other middle squares. */
               pts3(u, v, 2) = 2.0
            END IF
         ELSE
            pts3(u, v, 2) = 0.0
         END IF
         ' /* Yellow. */
         pts4(u, v, 0) = 2.0 * u
         pts4(u, v, 1) = 2.0 * (v - 3.0)
         IF (u=1 OR u = 2 OR u = 3) AND (v = 1 OR v = 2) THEN
            IF v = 1 THEN
               ' /* Push down front middle and right squares. */
               pts4(u, v, 2) = -2.0
            ELSE
               ' /* Pull up back middle and right squares. */
               pts4(u, v, 2) = 5.0
            END IF
         ELSE
            pts4(u, v, 2) = 0.0
         END IF
      NEXT
   NEXT

   ' /* Stretch up red's far right corner. */
   pts1(3, 3, 2) = 6
   ' /* Pull down green's near left corner a little. */
   pts2(0, 0, 2) = -2
   ' /* Turn up meeting of four corners. */
   pts1(0, 0, 2) = 1
   pts2(3, 3, 2) = 1
   pts3(3, 0, 2) = 1
   pts4(0, 3, 2) = 1

   glMatrixMode GL_PROJECTION
   gluPerspective 55.0, 1.0, 2.0, 24.0
   glMatrixMode GL_MODELVIEW
   glTranslatef 0.0, 0.0, -15.0
   glRotatef 330.0, 1.0, 0.0, 0.0

   glNewList 1, GL_COMPILE
   ' /* Render red hill. */
   glMaterialfv GL_FRONT, GL_DIFFUSE, @mat_red_diffuse(0)
   gluBeginSurface nurb
      gluNurbsSurface nurb, 8, @knots(0), 8, @knots(0), _
        4 * 3, 3, @pts1(0, 0, 0), _
        4, 4, GL_MAP2_VERTEX_3
   gluEndSurface nurb

   ' /* Render green hill. */
   glMaterialfv GL_FRONT, GL_DIFFUSE, @mat_green_diffuse(0)
   gluBeginSurface nurb
      gluNurbsSurface nurb, 8, @knots(0), 8, @knots(0), _
        4 * 3, 3, @pts2(0, 0, 0), _
        4, 4, GL_MAP2_VERTEX_3
   gluEndSurface nurb

   ' /* Render blue hill. */
   glMaterialfv GL_FRONT, GL_DIFFUSE, @mat_blue_diffuse(0)
   gluBeginSurface nurb
      gluNurbsSurface nurb, 8, @knots(0), 8, @knots(0), _
        4 * 3, 3, @pts3(0, 0, 0), _
        4, 4, GL_MAP2_VERTEX_3
   gluEndSurface nurb

   ' /* Render yellow hill. */
   glMaterialfv GL_FRONT, GL_DIFFUSE, @mat_yellow_diffuse(0)
   gluBeginSurface nurb
      gluNurbsSurface nurb, 8, @knots(0), 8, @knots(0), _
        4 * 3, 3, @pts4(0, 0, 0), _
        4, 4, GL_MAP2_VERTEX_3
   gluEndSurface nurb
   glEndList

END SUB
' =======================================================================================

' =======================================================================================
SUB CtxOgl.ResizeScene

   ' // Get the dimensions of the control
   IF m_pGraphCtx = NULL THEN EXIT SUB
   DIM nWidth AS LONG = AfxGetWindowWidth(m_pGraphCtx->hWindow)
   DIM nHeight AS LONG = AfxGetWindowHeight(m_pGraphCtx->hWindow)
   ' // Prevent divide by zero making height equal one
   IF nHeight = 0 THEN nHeight = 1
   ' // Reset the current viewport
   glViewport 0, 0, nWidth, nHeight

END SUB
' =======================================================================================

' =======================================================================================
SUB CtxOgl.RenderScene

   ' // Clear the screen buffer
   glClear GL_COLOR_BUFFER_BIT OR GL_DEPTH_BUFFER_BIT
   ' // Call the list
   glCallList 1
   glFlush

END SUB
' =======================================================================================

' ========================================================================================
' Main
' ========================================================================================
FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                  BYVAL hPrevInstance AS HINSTANCE, _
                  BYVAL szCmdLine AS ZSTRING PTR, _
                  BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   ' // The recommended way is to use a manifest file
   AfxSetProcessDPIAware

   ' // Creates the main window
   DIM pWindow AS CWindow
   ' -or- DIM pWindow AS CWindow = "MyClassName" (use the name that you wish)
   ' // Create the window
   DIM hwndMain AS HWND = pWindow.Create(NULL, GL_WindowCaption, @WndProc)
   ' // Don't erase the background
   pWindow.ClassStyle = CS_DBLCLKS
   ' // Use a black brush
   pWindow.Brush = CreateSolidBrush(BGR(255, 255, 255))
   ' // Sizes the window by setting the wanted width and height of its client area
   pWindow.SetClientSize(GL_WINDOWWIDTH, GL_WINDOWHEIGHT)
   ' // Centers the window
   pWindow.Center

   ' // Add a subclassed graphic control with OPENGL enabled
   DIM pGraphCtx AS CGraphCtx = CGraphCtx(@pWindow, IDC_GRCTX, "OPENGL", _
       0, 0, pWindow.ClientWidth, pWindow.ClientHeight)
'   pGraphCtx.Stretchable = TRUE
   pGraphCtx.Resizable = TRUE
   ' // Set the focus in the control
   SetFocus pGraphCtx.hWindow
   ' // Set the timer (using a timer to trigger redrawing allows a smoother rendering)
   SetTimer(pGraphCtx.hWindow, 1, 0, NULL)

   ' // Create an instance of the CtxOgl class
   DIM pCtxOgl AS CtxOgl = @pGraphCtx
   ' // Subclass the graphic control
   SetWindowSubclass pGraphCtx.hWindow, CAST(SUBCLASSPROC, @GraphCtx_SubclassProc), IDC_GRCTX, CAST(DWORD_PTR, @pCtxOgl)
   ' // Setup the OpenGL scene
   pCtxOgl.SetupScene
   ' // Resize the OpenGL scene
   pCtxOgl.ResizeScene
   ' // Render the OpenGL scene
   pCtxOgl.RenderScene

   ' // Dispatch Windows events
   FUNCTION = pWindow.DoEvents(nCmdShow)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Main window procedure
' ========================================================================================
FUNCTION WndProc (BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

   SELECT CASE uMsg

      CASE WM_SYSCOMMAND
         ' // Disable the Windows screensaver
         IF (wParam AND &hFFF0) = SC_SCREENSAVE THEN EXIT FUNCTION
         ' // Close the window
         IF (wParam AND &hFFF0) = SC_CLOSE THEN
            SendMessageW hwnd, WM_CLOSE, 0, 0
            EXIT FUNCTION
         END IF

      CASE WM_COMMAND
         SELECT CASE GET_WM_COMMAND_ID(wParam, lParam)
            CASE IDCANCEL
               ' // If ESC key pressed, close the application by sending an WM_CLOSE message
               IF GET_WM_COMMAND_CMD(wParam, lParam) = BN_CLICKED THEN
                  SendMessageW hwnd, WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF
         END SELECT

      CASE WM_SIZE
         IF wParam <> SIZE_MINIMIZED THEN
            DIM pWindow AS CWindow PTR = AfxCWindowPtr(hwnd)
            ' // If the window isn't minimized, resize the graphic control
            IF pWindow THEN pWindow->MoveWindow GetDlgItem(hwnd, IDC_GRCTX), _
               0, 0, pWindow->ClientWidth, pWindow->ClientHeight, CTRUE
         END IF

    	CASE WM_DESTROY
         ' // Ends the application by sending a WM_QUIT message
         PostQuitMessage(0)
         EXIT FUNCTION

   END SELECT

   ' // Default processing of Windows messages
   FUNCTION = DefWindowProcW(hwnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Processes messages for the subclassed Button window.
' ========================================================================================
FUNCTION GraphCtx_SubclassProc ( _
   BYVAL hwnd   AS HWND, _                 ' // Control window handle
   BYVAL uMsg   AS UINT, _                 ' // Type of message
   BYVAL wParam AS WPARAM, _               ' // First message parameter
   BYVAL lParam AS LPARAM, _               ' // Second message parameter
   BYVAL uIdSubclass AS UINT_PTR, _        ' // The subclass ID
   BYVAL dwRefData AS DWORD_PTR _          ' // Pointer to reference data
   ) AS LRESULT

   SELECT CASE uMsg

      CASE WM_GETDLGCODE
         ' // All keyboard input
         FUNCTION = DLGC_WANTALLKEYS
         EXIT FUNCTION

      CASE WM_TIMER
         ' // Render the scene
         DIM pCtxOgl AS CtxOgl PTR = cast(CtxOgl PTR, dwRefData)
         IF pCtxOgl THEN pCtxOgl->RenderScene
         EXIT FUNCTION

      CASE WM_SIZE
         ' // First perform the default action
         DefSubclassProc(hwnd, uMsg, wParam, lParam)
         ' // Check if the graphic contol is resizable
         DIM bResizable AS BOOLEAN =  AfxCGraphCtxPtr(hwnd)->Resizable
         ' // If it is resizable, we need to recreate the scene
         ' // because the rendering context has changed
         IF bResizable THEN
            DIM pCtxOgl AS CtxOgl PTR = cast(CtxOgl PTR, dwRefData)
            pCtxOgl->SetUpScene
            pCtxOgl->ResizeScene
            pCtxOgl->RenderScene
         END IF

      EXIT FUNCTION

      CASE WM_DESTROY
         ' // Kill the timer
         KillTimer(hwnd, 1)
         ' // REQUIRED: Remove control subclassing
         RemoveWindowSubclass hwnd, @GraphCtx_SubclassProc, uIdSubclass

   END SELECT

   ' // Default processing of Windows messages
   FUNCTION = DefSubclassProc(hwnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================
